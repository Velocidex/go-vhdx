
package parser

// Autogenerated code from vhdx.json. Do not edit.

import (
    "encoding/binary"
    "fmt"
    "bytes"
    "io"
    "sort"
    "strings"
    "unicode/utf16"
    "unicode/utf8"
)

var (
   // Depending on autogenerated code we may use this. Add a reference
   // to shut the compiler up.
   _ = bytes.MinRead
   _ = fmt.Sprintf
   _ = utf16.Decode
   _ = binary.LittleEndian
   _ = utf8.RuneError
   _ = sort.Strings
   _ = strings.Join
   _ = io.Copy
)

func indent(text string) string {
    result := []string{}
    lines := strings.Split(text,"\n")
    for _, line := range lines {
         result = append(result, "  " + line)
    }
    return strings.Join(result, "\n")
}


type VHDXProfile struct {
    Off_BATEntry_State int64
    Off_BATEntry_FileOffsetMB int64
    Off_FileParameters_BlockSize int64
    Off_FileParameters_HasParent int64
    Off_FileType_Signature int64
    Off_FileType_Creator int64
    Off_FileType_Header1 int64
    Off_FileType_Header2 int64
    Off_FileType_Region1 int64
    Off_FileType_Region2 int64
    Off_GUID_Data1 int64
    Off_GUID_Data2 int64
    Off_GUID_Data3 int64
    Off_GUID_Data4 int64
    Off_Header_Signature int64
    Off_Header_SequenceNumber int64
    Off_Metadata_Signature int64
    Off_Metadata_EntryCount int64
    Off_Metadata_Entries int64
    Off_MetadataEntry_GUID int64
    Off_MetadataEntry_MetadataOffset int64
    Off_MetadataEntry_Length int64
    Off_Misc_Regions int64
    Off_Misc_Bats int64
    Off_Region_Signature int64
    Off_Region_EntryCount int64
    Off_RegionEntry_GUID int64
    Off_RegionEntry_FileOffset int64
    Off_RegionEntry_Length int64
    Off_RegionEntry_IsRequired int64
}

func NewVHDXProfile() *VHDXProfile {
    // Specific offsets can be tweaked to cater for slight version mismatches.
    self := &VHDXProfile{0,0,0,4,0,8,65536,131072,196608,262144,0,4,6,8,0,8,0,10,32,0,16,20,0,0,0,8,0,16,24,28}
    return self
}

func (self *VHDXProfile) BATEntry(reader io.ReaderAt, offset int64) *BATEntry {
    return &BATEntry{Reader: reader, Offset: offset, Profile: self}
}

func (self *VHDXProfile) FileParameters(reader io.ReaderAt, offset int64) *FileParameters {
    return &FileParameters{Reader: reader, Offset: offset, Profile: self}
}

func (self *VHDXProfile) FileType(reader io.ReaderAt, offset int64) *FileType {
    return &FileType{Reader: reader, Offset: offset, Profile: self}
}

func (self *VHDXProfile) GUID(reader io.ReaderAt, offset int64) *GUID {
    return &GUID{Reader: reader, Offset: offset, Profile: self}
}

func (self *VHDXProfile) Header(reader io.ReaderAt, offset int64) *Header {
    return &Header{Reader: reader, Offset: offset, Profile: self}
}

func (self *VHDXProfile) Metadata(reader io.ReaderAt, offset int64) *Metadata {
    return &Metadata{Reader: reader, Offset: offset, Profile: self}
}

func (self *VHDXProfile) MetadataEntry(reader io.ReaderAt, offset int64) *MetadataEntry {
    return &MetadataEntry{Reader: reader, Offset: offset, Profile: self}
}

func (self *VHDXProfile) Misc(reader io.ReaderAt, offset int64) *Misc {
    return &Misc{Reader: reader, Offset: offset, Profile: self}
}

func (self *VHDXProfile) Region(reader io.ReaderAt, offset int64) *Region {
    return &Region{Reader: reader, Offset: offset, Profile: self}
}

func (self *VHDXProfile) RegionEntry(reader io.ReaderAt, offset int64) *RegionEntry {
    return &RegionEntry{Reader: reader, Offset: offset, Profile: self}
}


type BATEntry struct {
    Reader io.ReaderAt
    Offset int64
    Profile *VHDXProfile
}

func (self *BATEntry) Size() int {
    return 8
}

func (self *BATEntry) State() uint64 {
   value := ParseUint64(self.Reader, self.Profile.Off_BATEntry_State + self.Offset)
   return (uint64(value) & 0x7) >> 0x0
}

func (self *BATEntry) FileOffsetMB() uint64 {
   value := ParseUint64(self.Reader, self.Profile.Off_BATEntry_FileOffsetMB + self.Offset)
   return (uint64(value) & 0x7fffffffffffffff) >> 0x14
}
func (self *BATEntry) DebugString() string {
    result := fmt.Sprintf("struct BATEntry @ %#x:\n", self.Offset)
    result += fmt.Sprintf("  State: %#0x\n", self.State())
    result += fmt.Sprintf("  FileOffsetMB: %#0x\n", self.FileOffsetMB())
    return result
}

type FileParameters struct {
    Reader io.ReaderAt
    Offset int64
    Profile *VHDXProfile
}

func (self *FileParameters) Size() int {
    return 8
}

func (self *FileParameters) BlockSize() uint32 {
   return ParseUint32(self.Reader, self.Profile.Off_FileParameters_BlockSize + self.Offset)
}

func (self *FileParameters) HasParent() uint64 {
   value := ParseUint64(self.Reader, self.Profile.Off_FileParameters_HasParent + self.Offset)
   return (uint64(value) & 0x3) >> 0x1
}
func (self *FileParameters) DebugString() string {
    result := fmt.Sprintf("struct FileParameters @ %#x:\n", self.Offset)
    result += fmt.Sprintf("  BlockSize: %#0x\n", self.BlockSize())
    result += fmt.Sprintf("  HasParent: %#0x\n", self.HasParent())
    return result
}

type FileType struct {
    Reader io.ReaderAt
    Offset int64
    Profile *VHDXProfile
}

func (self *FileType) Size() int {
    return 520
}


func (self *FileType) Signature() string {
  return ParseString(self.Reader, self.Profile.Off_FileType_Signature + self.Offset, 8)
}


func (self *FileType) Creator() string {
  return ParseTerminatedUTF16String(self.Reader, self.Profile.Off_FileType_Creator + self.Offset)
}

func (self *FileType) Header1() *Header {
    return self.Profile.Header(self.Reader, self.Profile.Off_FileType_Header1 + self.Offset)
}

func (self *FileType) Header2() *Header {
    return self.Profile.Header(self.Reader, self.Profile.Off_FileType_Header2 + self.Offset)
}

func (self *FileType) Region1() *Region {
    return self.Profile.Region(self.Reader, self.Profile.Off_FileType_Region1 + self.Offset)
}

func (self *FileType) Region2() *Region {
    return self.Profile.Region(self.Reader, self.Profile.Off_FileType_Region2 + self.Offset)
}
func (self *FileType) DebugString() string {
    result := fmt.Sprintf("struct FileType @ %#x:\n", self.Offset)
    result += fmt.Sprintf("  Signature: %v\n", string(self.Signature()))
    result += fmt.Sprintf("  Creator: %v\n", string(self.Creator()))
    result += fmt.Sprintf("  Header1: {\n%v}\n", indent(self.Header1().DebugString()))
    result += fmt.Sprintf("  Header2: {\n%v}\n", indent(self.Header2().DebugString()))
    result += fmt.Sprintf("  Region1: {\n%v}\n", indent(self.Region1().DebugString()))
    result += fmt.Sprintf("  Region2: {\n%v}\n", indent(self.Region2().DebugString()))
    return result
}

type GUID struct {
    Reader io.ReaderAt
    Offset int64
    Profile *VHDXProfile
}

func (self *GUID) Size() int {
    return 16
}

func (self *GUID) Data1() uint32 {
   return ParseUint32(self.Reader, self.Profile.Off_GUID_Data1 + self.Offset)
}

func (self *GUID) Data2() uint16 {
   return ParseUint16(self.Reader, self.Profile.Off_GUID_Data2 + self.Offset)
}

func (self *GUID) Data3() uint16 {
   return ParseUint16(self.Reader, self.Profile.Off_GUID_Data3 + self.Offset)
}

func (self *GUID) Data4() []byte {
   return ParseArray_byte(self.Profile, self.Reader, self.Profile.Off_GUID_Data4 + self.Offset, 8)
}
func (self *GUID) DebugString() string {
    result := fmt.Sprintf("struct GUID @ %#x:\n", self.Offset)
    result += fmt.Sprintf("  Data1: %#0x\n", self.Data1())
    result += fmt.Sprintf("  Data2: %#0x\n", self.Data2())
    result += fmt.Sprintf("  Data3: %#0x\n", self.Data3())
    return result
}

type Header struct {
    Reader io.ReaderAt
    Offset int64
    Profile *VHDXProfile
}

func (self *Header) Size() int {
    return 4096
}


func (self *Header) Signature() string {
  return ParseString(self.Reader, self.Profile.Off_Header_Signature + self.Offset, 4)
}

func (self *Header) SequenceNumber() uint64 {
    return ParseUint64(self.Reader, self.Profile.Off_Header_SequenceNumber + self.Offset)
}
func (self *Header) DebugString() string {
    result := fmt.Sprintf("struct Header @ %#x:\n", self.Offset)
    result += fmt.Sprintf("  Signature: %v\n", string(self.Signature()))
    result += fmt.Sprintf("  SequenceNumber: %#0x\n", self.SequenceNumber())
    return result
}

type Metadata struct {
    Reader io.ReaderAt
    Offset int64
    Profile *VHDXProfile
}

func (self *Metadata) Size() int {
    return 0
}


func (self *Metadata) Signature() string {
  return ParseString(self.Reader, self.Profile.Off_Metadata_Signature + self.Offset, 8)
}

func (self *Metadata) EntryCount() uint16 {
   return ParseUint16(self.Reader, self.Profile.Off_Metadata_EntryCount + self.Offset)
}

func (self *Metadata) Entries() []*MetadataEntry {
   return ParseArray_MetadataEntry(self.Profile, self.Reader, self.Profile.Off_Metadata_Entries + self.Offset, 0)
}
func (self *Metadata) DebugString() string {
    result := fmt.Sprintf("struct Metadata @ %#x:\n", self.Offset)
    result += fmt.Sprintf("  Signature: %v\n", string(self.Signature()))
    result += fmt.Sprintf("  EntryCount: %#0x\n", self.EntryCount())
    return result
}

type MetadataEntry struct {
    Reader io.ReaderAt
    Offset int64
    Profile *VHDXProfile
}

func (self *MetadataEntry) Size() int {
    return 32
}


func (self *MetadataEntry) GUID() string {
  return ParseString(self.Reader, self.Profile.Off_MetadataEntry_GUID + self.Offset, 16)
}

func (self *MetadataEntry) MetadataOffset() uint32 {
   return ParseUint32(self.Reader, self.Profile.Off_MetadataEntry_MetadataOffset + self.Offset)
}

func (self *MetadataEntry) Length() uint32 {
   return ParseUint32(self.Reader, self.Profile.Off_MetadataEntry_Length + self.Offset)
}
func (self *MetadataEntry) DebugString() string {
    result := fmt.Sprintf("struct MetadataEntry @ %#x:\n", self.Offset)
    result += fmt.Sprintf("  GUID: %v\n", string(self.GUID()))
    result += fmt.Sprintf("  MetadataOffset: %#0x\n", self.MetadataOffset())
    result += fmt.Sprintf("  Length: %#0x\n", self.Length())
    return result
}

type Misc struct {
    Reader io.ReaderAt
    Offset int64
    Profile *VHDXProfile
}

func (self *Misc) Size() int {
    return 0
}

func (self *Misc) Regions() []*RegionEntry {
   return ParseArray_RegionEntry(self.Profile, self.Reader, self.Profile.Off_Misc_Regions + self.Offset, 0)
}

func (self *Misc) Bats() []*BATEntry {
   return ParseArray_BATEntry(self.Profile, self.Reader, self.Profile.Off_Misc_Bats + self.Offset, 0)
}
func (self *Misc) DebugString() string {
    result := fmt.Sprintf("struct Misc @ %#x:\n", self.Offset)
    return result
}

type Region struct {
    Reader io.ReaderAt
    Offset int64
    Profile *VHDXProfile
}

func (self *Region) Size() int {
    return 16
}


func (self *Region) Signature() string {
  return ParseString(self.Reader, self.Profile.Off_Region_Signature + self.Offset, 4)
}

func (self *Region) EntryCount() uint32 {
   return ParseUint32(self.Reader, self.Profile.Off_Region_EntryCount + self.Offset)
}
func (self *Region) DebugString() string {
    result := fmt.Sprintf("struct Region @ %#x:\n", self.Offset)
    result += fmt.Sprintf("  Signature: %v\n", string(self.Signature()))
    result += fmt.Sprintf("  EntryCount: %#0x\n", self.EntryCount())
    return result
}

type RegionEntry struct {
    Reader io.ReaderAt
    Offset int64
    Profile *VHDXProfile
}

func (self *RegionEntry) Size() int {
    return 32
}


func (self *RegionEntry) GUID() string {
  return ParseString(self.Reader, self.Profile.Off_RegionEntry_GUID + self.Offset, 16)
}

func (self *RegionEntry) FileOffset() uint64 {
    return ParseUint64(self.Reader, self.Profile.Off_RegionEntry_FileOffset + self.Offset)
}

func (self *RegionEntry) Length() uint32 {
   return ParseUint32(self.Reader, self.Profile.Off_RegionEntry_Length + self.Offset)
}

func (self *RegionEntry) IsRequired() uint32 {
   return ParseUint32(self.Reader, self.Profile.Off_RegionEntry_IsRequired + self.Offset)
}
func (self *RegionEntry) DebugString() string {
    result := fmt.Sprintf("struct RegionEntry @ %#x:\n", self.Offset)
    result += fmt.Sprintf("  GUID: %v\n", string(self.GUID()))
    result += fmt.Sprintf("  FileOffset: %#0x\n", self.FileOffset())
    result += fmt.Sprintf("  Length: %#0x\n", self.Length())
    result += fmt.Sprintf("  IsRequired: %#0x\n", self.IsRequired())
    return result
}

func ParseArray_BATEntry(profile *VHDXProfile, reader io.ReaderAt, offset int64, count int) []*BATEntry {
    result := make([]*BATEntry, 0, count)
    for i:=0; i<count; i++ {
      value := profile.BATEntry(reader, offset)
      result = append(result, value)
      offset += int64(value.Size())
    }
    return result
}

func ParseArray_MetadataEntry(profile *VHDXProfile, reader io.ReaderAt, offset int64, count int) []*MetadataEntry {
    result := make([]*MetadataEntry, 0, count)
    for i:=0; i<count; i++ {
      value := profile.MetadataEntry(reader, offset)
      result = append(result, value)
      offset += int64(value.Size())
    }
    return result
}

func ParseArray_RegionEntry(profile *VHDXProfile, reader io.ReaderAt, offset int64, count int) []*RegionEntry {
    result := make([]*RegionEntry, 0, count)
    for i:=0; i<count; i++ {
      value := profile.RegionEntry(reader, offset)
      result = append(result, value)
      offset += int64(value.Size())
    }
    return result
}

func ParseArray_byte(profile *VHDXProfile, reader io.ReaderAt, offset int64, count int) []byte {
    result := make([]byte, 0, count)
    for i:=0; i<count; i++ {
      value := ParseUint8(reader, offset)
      result = append(result, value)
      offset += int64(1)
    }
    return result
}

func ParseUint16(reader io.ReaderAt, offset int64) uint16 {
	var buf [2]byte
	data := buf[:]
    _, err := reader.ReadAt(data, offset)
    if err != nil {
       return 0
    }
    return binary.LittleEndian.Uint16(data)
}

func ParseUint32(reader io.ReaderAt, offset int64) uint32 {
	var buf [4]byte
	data := buf[:]
    _, err := reader.ReadAt(data, offset)
    if err != nil {
       return 0
    }
    return binary.LittleEndian.Uint32(data)
}

func ParseUint64(reader io.ReaderAt, offset int64) uint64 {
	var buf [8]byte
	data := buf[:]
    _, err := reader.ReadAt(data, offset)
    if err != nil {
       return 0
    }
    return binary.LittleEndian.Uint64(data)
}

func ParseUint8(reader io.ReaderAt, offset int64) byte {
	var buf [1]byte
	data := buf[:]
    _, err := reader.ReadAt(data, offset)
    if err != nil {
       return 0
    }
    return data[0]
}

func ParseTerminatedString(reader io.ReaderAt, offset int64) string {
   var buf [1024]byte
   data := buf[:]
   n, err := reader.ReadAt(data, offset)
   if err != nil && err != io.EOF {
     return ""
   }
   idx := bytes.Index(data[:n], []byte{0})
   if idx < 0 {
      idx = n
   }
   return string(data[0:idx])
}

func ParseString(reader io.ReaderAt, offset int64, length int64) string {
   data := make([]byte, length)
   n, err := reader.ReadAt(data, offset)
   if err != nil && err != io.EOF {
      return ""
   }
   return string(data[:n])
}


func ParseTerminatedUTF16String(reader io.ReaderAt, offset int64) string {
   var buf [1024]byte
   data := buf[:]
   n, err := reader.ReadAt(data, offset)
   if err != nil && err != io.EOF {
     return ""
   }

   idx := bytes.Index(data[:n], []byte{0, 0})
   if idx < 0 {
      idx = n-1
   }
   if idx%2 != 0 {
      idx += 1
   }
   return UTF16BytesToUTF8(data[0:idx], binary.LittleEndian)
}

func ParseUTF16String(reader io.ReaderAt, offset int64, length int64) string {
   data := make([]byte, length)
   n, err := reader.ReadAt(data, offset)
   if err != nil && err != io.EOF {
     return ""
   }
   return UTF16BytesToUTF8(data[:n], binary.LittleEndian)
}

func UTF16BytesToUTF8(b []byte, o binary.ByteOrder) string {
	if len(b) < 2 {
		return ""
	}

	if b[0] == 0xff && b[1] == 0xfe {
		o = binary.BigEndian
		b = b[2:]
	} else if b[0] == 0xfe && b[1] == 0xff {
		o = binary.LittleEndian
		b = b[2:]
	}

	utf := make([]uint16, (len(b)+(2-1))/2)

	for i := 0; i+(2-1) < len(b); i += 2 {
		utf[i/2] = o.Uint16(b[i:])
	}
	if len(b)/2 < len(utf) {
		utf[len(utf)-1] = utf8.RuneError
	}

	return string(utf16.Decode(utf))
}


